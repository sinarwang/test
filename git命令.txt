1、clone刚才新建的repository 到本地
git clone https://github.com/sinarwang/ss-weixin.git

2、本地repository目录
C:\Users\Administrator\Documents\GitHub

3、切换到Git shell 命令行下，输入命令：
git init
git commit -m 'first commit'
git remote add origin https://github.com/sinarwang/ssm.git
git push origin master
如果执行git remote add origin

https://github.com/Flowerowl/stumansys.git
，出现错误：

　　fatal: remote origin already exists
则执行以下语句：

　　git remote rm origin
再往后执行git remote add origin https://github.com/Flowerowl/stumansys.git 即可。

在执行git push origin master时，报错：

　　error:failed to push som refs to.......
则执行以下语句：

　　git pull origin master
先把远程服务器github上面的文件拉先来，再push 上去。



git config --global user.name "sinar"
git config --global user.email "yizhi_wang@126.com"
git remote add origin https://github.com/sinarwang/ssm.git
git remote add origin git@github.com:sinarwang/ssm.git
git remote add origin https://github.com/sinarwang/ss-weixin.git
git remote add origin git@github.com:sinarwang/ss-weixin.git

git remote rm origin
git remote add origin https://github.com/sinarwang/ssm.git
git commit -m "first commit"

git push orgin master
git pull origin master



验证是否配置成功 :
复制如下代码:
ssh -T git@github.com
然后出现如下信息：
Warning: Permanently added the RSA host key for IP address '192.30.252.131' to the list of known hosts.

Hi hawx1993! You've successfully authenticated, but GitHub does not provide shell access.
验证时可能让你输入YES，当出现以上信息时，说明配置成功，可以连接上GitHub;
创建版本库
第一步，在本地创建一个版本库，代码如下：
$ mkdir test   #test是你的文件夹的名字
$ cd test     #进入test所在目录
$ pwd        #pwd命令用于显示当前目录    
/Users/trigkit4/test #这是在我的Mac上的目录
第二步，通过git init命令把这个目录变成Git可以管理的仓库：
$ git init
然后会输出以下信息：
Initialized empty Git repository in /Users/trigkit4/banner/.git/
这里的.git目录是Git用来跟踪管理版本库的，默认是隐藏的。
第三部，接着，在github上创建一个你自己的new repository，然后下一步，
mkdir test  
cd test   
git init    
# initialize your git repository  
touch README  
# create a file named README  
git add README    
# add README to cache  
git commit -m 'first commit'  
# commit your files to local repository  
然后我们将本地的文件传送至github中，使用如下命令：
git remote add origin https://github.com/yourname/test.git  
git push -u origin master  
从现有仓库克隆
git clone git://github.com/yourname/test.git
git clone git://github.com/yourname/grit.git mypro#克隆到自定义文件夹
本地
git add *#跟踪新文件

rm *&git rm *#移除文件
git rm -f *#移除文件
git rm --cached *#取消跟踪
git mv file_from file_to#重命名跟踪文件

git log#查看提交记录

git commit#提交更新
git commit -m 'message'
git commit -a#跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交
git commit --amend#修改最后一次提交

git reset HEAD *#取消已经暂存的文件

git checkout -- file#取消对文件的修改（从暂存区去除file）
git checkout branch|tag|commit -- file_name#从仓库取出file覆盖当前分支
git checkout -- .#从暂存区去除文件覆盖工作区
分支
git branch#列出本地分支
git branch -r#列出远端分支
git branch -a#列出所有分支
git branch -v#查看各个分支最后一个提交对象的信息
git branch --merge#查看已经合并到当前分支的分支
git branch --no-merge#查看为合并到当前分支的分支

git branch test#新建test分支
git checkout test#切换到test分支
git checkout -b test#新建+切换到test分支
git checkout -b test dev#基于dev新建test分支，并切换

git branch -d test#删除test分支
git branch -D test#强制删除test分支

git merge test#将test分支合并到当前分支
git rebase master#将master分之上超前的提交，变基到当前分支
常见错误
第一个：
error: src refspec master does not match any.
error: failed to push some refs to 'https://github.com/yourname/test.git'
输入如下代码：
$ cd myproject
$ git init
$ git add .
$ git commit -m 'initial commit'
$ git push origin master
第二个：
git push -u origin master fatal: unable to access 'https://github.com/ZeyuChen/TPlus.git/': SSLRead() return error -9806
这种错误就是https挂了，解决方案就是在project目录里面的.git/config文件里面，修改repo的url连接，从https修改为git协议就可以了。
本来是url = https://github.com/ZeyuChen/TPlus.git
修改为
[remote "origin"]
   url = ssh://git@github.com/ZeyuChen/TPlus.git
   fetch = +refs/heads/*:refs/remotes/origin/*
再次push就ok了。
Git 命令详解
现在我们有了本地和远程的版本库，让我们来试着用用Git的基本命令：

git pull：从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：'git pull origin master'就是将origin这个版本库的代码更新到本地的master主枝，该功能类似于SVN的update

git add：是 将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步，例如'git add app/model/user.rb'就会增加app/model/user.rb文件到Git的索引中，该功能类似于SVN的add

git rm：从当前的工作空间中和索引中删除文件，例如'git rm app/model/user.rb'，该功能类似于SVN的rm、del

git commit：提交当前工作空间的修改内容，类似于SVN的commit命令，例如'git commit -m story #3, add user model'，提交的时候必须用-m来输入一条提交信息，该功能类似于SVN的commit

git push：将本地commit的代码更新到远程版本库中，例如'git push origin'就会将本地的代码更新到名为orgin的远程版本库中

git log：查看历史日志，该功能类似于SVN的log

git revert：还原一个版本的修改，必须提供一个具体的Git版本号，例如'git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20'，Git的版本号都是生成的一个哈希值